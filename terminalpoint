#!/usr/bin/env ruby

require 'io/console'
require './lib/decorated_text'

ROWS = IO.console.winsize[0] - (STDOUT.tty? ? 0 : 1) # leave one for the `less` status bar
COLS = IO.console.winsize[1]
CONFIG = {
	"title.color" => "bold",
	"title.position" => "center",  # or "left", or "right", or "content-center"
	"title.box" => "none", # or any combination of "top", "bottom", "left", "right", "double"; "box" means "top bottom left right"
	"title.box.color" => "plain",
	"table.header.color" => "bold",
	"table.position" => "center",  # or "left", or "right"
	"table.color" => "plain",
	"bullet.color" => "plain",
	"text.color" => "plain",
	"footer.color" => "plain",
	"bullet.text" => "»",
	"pad.top" => 2,
	"pad.left" => 3,
	"pad.right" => 2,
	"pad.title" => 2,
	"pad.column" => 3,
	"code.color" => "bold bg:dark-grey",
}
COLOR = {
	"plain" => "",
	"bold" => "1",
	"italic" => "3",
	"underlined" => "4",
	"red" => "31",
	"green" => "32",
	"brown" => "33",
	"blue" => "34",
	"magenta" => "35",
	"cyan" => "36",
	"grey" => "37",
	"dark-grey" => "90",
	"bright-red" => "91",
	"bright-green" => "92",
	"yellow" => "93",
	"bright-blue" => "94",
	"bright-magenta" => "95",
	"bright-cyan" => "96",
	"white" => "97",
	"pink" => "38;5;206",
	"orange" => "38;5;202",
	"purple" => "38;5;91",
}
ANSI_SHOW_CURSOR = "\e[?25h"
ANSI_HIDE_CURSOR = "\e[?25l" 
ANSI_CLEAR_SCREEN = "\e[2J"
ANSI_GO_HOME = "\e[H"
INPUT_PGUP = "\e[5~"
INPUT_PGDOWN = "\e[6~"
INPUT_LEFT = "\e[D"
INPUT_RIGHT = "\e[C"
INPUT_UP = "\e[A"
INPUT_DOWN = "\e[B"
INPUT_CTRL_L = "\f"
INPUT_HOME = "\e[H"
INPUT_END = "\e[F"

class BufferBase
	def child(xofs, yofs, width, height)
		raise "child is too wide: #{xofs} + #{width} > #{@width}" if xofs + width > @width
		raise "child is too tall: #{yofs} + #{height} > #{@height}" if yofs + height > @height

		ChildRenderBuffer.new(width, height) do |x, y, dtxt|
			self.write(xofs + x, yofs + y, dtxt)
		end
	end
end

class ChildRenderBuffer < BufferBase
	attr_reader :width, :height
	def initialize(width, height, &block)
		@width = width
		@height = height
		@block = block
	end

	def write(x, y, dtxt)
		raise "y is out of bounds: #{y} >= #{height}" if y >= @height
		raise "x is out of bounds: #{x} + #{dtxt.width} > #{@width}" if x + dtxt.width > @width
		
		@block.call(x, y, dtxt)
	end
end

class RenderBuffer < BufferBase
	attr_reader :width, :height
	def initialize(width, height)
		@width = width
		@height = height
		@lines = (0...@height).map{ DecoratedText.new }
	end

	def write(x, y, dtxt)
		raise "y is out of bounds: #{y} >= #{height}" if y >= @height
		raise "x is out of bounds: #{x} + #{dtxt.width} > #{@width}" if x + dtxt.width > @width
		line = @lines[y]
		raise "overwrite on line #{y}: #{x} < #{line.width}" if x < line.width
		gap = x - line.width
		line << DecoratedTextSegment.new("", " " * gap) if gap > 0
		line.push_all(dtxt)
		dtxt.width
	end

	def display
		print ANSI_CLEAR_SCREEN + ANSI_GO_HOME + ANSI_HIDE_CURSOR if STDOUT.tty?
		@lines.each_with_index do |line, i|
			if i != @lines.size - 1
				puts line.to_ansi
			else
				print line.to_ansi
			end
		end
	end
end

class Entry
	def own_padding?
		false
	end

	def invert_color(col)
		col.split(/\s+/).map {|c|
			case c
				when /^bg:$1/
					$1
				else
					if COLOR[c].size >= 2
						# ANSI color codes are all 2+ characters
						"bg:#{c}"
					else
						# Supported ANSI font styles are all 1 character
						c
					end
			end
		}.join(' ')
	end

	def borrow_formatting(s, parts)
		if !s.start_with?("\e[")
			if parts.join(' ') =~ /.*(\e\[[0-9;]+m)/
				s = $1 + s
			end
		end

		if !s.end_with?("\e[0m")
			s = s + "\e[0m"
		end

		s
	end

	def markdown(plain_color_key, s)
		DecoratedText.from_markdown(
			TerminalPoint.color_to_codes(CONFIG[plain_color_key]),
			TerminalPoint.color_to_codes(CONFIG['code.color']),
			s)
	end
end

class Center < Entry
	def initialize(child)
		raise "Child must be an Entry, not #{child.class}" unless child.is_a?(Entry)
		@child = child
	end

	def width
		@child.width
	end

	def min_width
		@child.min_width
	end

	def render(buf, max_content_width)
		real_width = [width, buf.width].min
		left_pad = (buf.width - real_width)/2
		@child.render(buf.child(left_pad, 0, real_width, buf.height), max_content_width)
	end
end

class Title < Entry
	def initialize(txt)
		@title_box = CONFIG['title.box']
		@title_box_color = TerminalPoint.color_to_codes(CONFIG['title.box.color'])
		@title_position = CONFIG['title.position']
		@pad_left = CONFIG['pad.left']
		@pad_right = CONFIG['pad.right']
		@pad_title = CONFIG['pad.title']
		@txt = markdown('title.color', txt)
	end

	def own_padding?
		true
	end

	def width
		@txt.width
	end

	def min_width
		width
	end

	def render(buf, max_content_width)
		title_box = @title_box.downcase.split
		box_dbl = title_box.include?('double')
		box_box = title_box.include?('box')
		box_l = box_box || title_box.include?('left')
		box_r = box_box || title_box.include?('right')
		box_t = box_box || title_box.include?('top')
		box_b = box_box || title_box.include?('bottom')
		box_bar = title_box.include?('bar')

		real_txt = @txt.dup
		real_txt.prepend(DecoratedTextSegment.new(@title_box_color, (box_dbl ?  "║ " : '│ '))) if box_l
		real_txt << DecoratedTextSegment.new(@title_box_color, (box_dbl ? " ║" : ' │')) if box_r

		left_title_pos = case @title_position
			when "center"
				(buf.width - real_txt.width)/2
			when "left"
				@pad_left
			when "right"
				buf.width - real_txt.width - @pad_right
			when "content-center"
				@pad_left + (max_content_width - real_txt.width)/2
			else
				raise "unknown title.position: #{@title_position}"
		end
		ypos = 0
		if box_bar
			buf.write(0, 0, DecoratedText.new(@title_box_color, "▄" * buf.width))
			buf.write(0, 1, DecoratedText.new(@title_box_color, "█" * left_title_pos))
			buf.write(left_title_pos, 1, real_txt)
			buf.write(left_title_pos + real_txt.width, 1, DecoratedText.new(@title_box_color, "█" * (buf.width - left_title_pos - real_txt.width)))
			buf.write(0, 2, DecoratedText.new(@title_box_color, "▀" * buf.width))
			ypos += 3
		else
			if box_t
				top_line = DecoratedText.new(@title_box_color, "")
				top_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "╔═" : "┌─")) if box_l
				top_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "═" : "─") * @txt.width)
				top_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "═╗" : "─┐")) if box_r
				buf.write(left_title_pos, ypos, top_line)
				ypos += 1
			end

			buf.write(left_title_pos, ypos, real_txt)
			ypos += 1

			if box_b
				bottom_line = DecoratedText.new(@title_box_color, "")
				bottom_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "╚═" : "└─")) if box_l
				bottom_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "═" : "─") * @txt.width)
				bottom_line << DecoratedTextSegment.new(@title_box_color, (box_dbl ? "═╝" : "─┘")) if box_r
				buf.write(left_title_pos, ypos, bottom_line)
				ypos += 1
			end
		end
		ypos += @pad_title

		ypos
	end
end

class Bullet < Entry
	def initialize(*args)
		indent, txt = case args.size
			when 1
				[ 1, args[0] ]
			when 2
				[ args[0], args[1] ]
			else
				raise "Invalid arguments to bullet"
		end

		@txt = markdown('text.color', txt)
		@bullet_text = DecoratedText.new(TerminalPoint.color_to_codes(CONFIG['bullet.color']), CONFIG['bullet.text'])
		@pad_indent = 4 * (indent - 1)
	end

	def width
		@bullet_text.width + 1 + @pad_indent + @txt.width
	end

	def min_width
		@bullet_text.width + 1 + @pad_indent + @txt.min_width
	end

	def render(buf, max_content_width)
		wrap_width = buf.width - @bullet_text.width - 1 - @pad_indent
		split = @txt.wrap(wrap_width)
		split.each_with_index do |part, j|
			if j == 0
				buf.write(@pad_indent, j, @bullet_text)
			end
			buf.write(@pad_indent + @bullet_text.width + 1, j, part)
		end

		split.size + 1
	end
end

class Table < Entry
	def initialize(arr)
		is_header = false
		arr = arr.map {|row|
			if row == :header
				is_header = true
				nil
			elsif is_header
				is_header = false
				[true, row.map{|col| markdown('table.header.color', col)}]
			else
				[false, row.map{|col| markdown('text.color', col)}]
			end
		}.compact

		@arr = arr
		@table_position = CONFIG['table.position']
		@table_header_color = TerminalPoint.color_to_codes(CONFIG['table.header.color'])
		@table_color = TerminalPoint.color_to_codes(CONFIG['table.color'])
	end

	def width
		ncolumns = @arr.map {|_, row| row.size if row.is_a?(Array)}.compact.max
		col_widths = (0...ncolumns).map do |col|
			@arr.map {|_, row| row[col].width if row.is_a?(Array)}.compact.max
		end
		col_widths.sum + ncolumns*3 + 1
	end

	def min_width
		ncolumns = @arr.map {|_, row| row.size if row.is_a?(Array)}.compact.max
		min_widths = (0...ncolumns).map do |col|
			@arr.map {|_, row| row[col].min_width if row.is_a?(Array)}.compact.max
		end
		min_widths.sum + ncolumns*3 + 1
	end

	def render(buf, max_content_width)
		ncolumns = @arr.map {|_, row| row.size if row.is_a?(Array)}.compact.max
		col_widths = (0...ncolumns).map do |col|
			@arr.map {|_, row| row[col].width if row.is_a?(Array)}.compact.max
		end
		min_widths = (0...ncolumns).map do |col|
			@arr.map {|_, row| row[col].min_width if row.is_a?(Array)}.compact.max
		end
		twidth = col_widths.sum + ncolumns*3 + 1

		while twidth >= buf.width
			col_widths = col_widths.zip(min_widths).map {|w, minw|
				[w * 9 / 10, minw].max
			}
			new_twidth = col_widths.sum + ncolumns*3 + 1
			raise "Table does not fit" if new_twidth == twidth
			twidth = new_twidth
		end

		ypos = 0

		left_pad = case @table_position
			when "left"
				0
			when "center"
				(buf.width - twidth)/2
			when "right"
				buf.width - twidth
			else
				raise "unknown table.position: #{@table_position}"
		end

		if @arr.first.first
			buf.write(left_pad, ypos, DecoratedText.new(@table_color, "╔" + ("═" * (twidth-2)) + "╗"))
		else
			buf.write(left_pad, ypos, DecoratedText.new(@table_color, "╔" + col_widths.map{|w| "═" * (w+2)}.join("╤") + "╗"))
		end
		ypos += 1
		@arr.each_with_index do |(is_header, row), rownum|
			lines_this_row = row.zip(col_widths).map { |cell, w| cell.wrap(w).size }.max

			# draw the left-edge vertical line at the start of the row
			(0...lines_this_row).each do |rowline|
				buf.write(left_pad, ypos+rowline, DecoratedText.new(@table_color, "║"))
			end

			# write row contents
			row.each_with_index.map do |cell, colnum|
				xpos = left_pad + col_widths[0...colnum].sum + colnum*3
				# draw the dividing vertical line to the left of the row
				if colnum > 0 && !is_header
					(0...lines_this_row).each do |rowline|
						buf.write(xpos, ypos+rowline, DecoratedText.new(@table_color, "│"))
					end
				end
				xpos += 2

				w = col_widths[colnum]
				cell.wrap(w).each_with_index do |cell_part, rowline|
					raise "cell [#{cell_part.as_plain_text}] too wide: #{cell_part.width} > #{w}" unless cell_part.width <= w
					buf.write(xpos, ypos+rowline, cell_part)
				end
			end

			# draw the right-edge vertical line at the end of the row
			xpos = left_pad + col_widths.sum + ncolumns*3
			(0...lines_this_row).each do |rowline|
				buf.write(xpos, ypos+rowline, DecoratedText.new(@table_color, "║"))
			end

			ypos += lines_this_row

			is_last = rownum + 1 == @arr.size
			next_is_header = !is_last && @arr[rownum+1][0]
			l, h, d, r = if is_header && is_last
				["╚", "═", "═", "╝"]
			elsif is_header && next_is_header
				["╠", "═", "═", "╣"]
			elsif is_header # but the next isn't
				["╠", "═", "╤", "╣"]
			elsif next_is_header # but this one isn't
				["╠", "═", "╧", "╣"]
			elsif is_last
				["╚", "═", "╧", "╝"]
			else
				["╟", "─", "┼", "╢"]
			end

			buf.write(left_pad, ypos, DecoratedText.new(@table_color, l + col_widths.map{|w| h * (w+2)}.join(d) + r))
			ypos += 1
		end
		ypos + 1
	end
end

class Pre < Entry
	def initialize(txt)
		@txt = txt
	end

	def width
		@txt.lines.map(&:size).max
	end

	def min_width
		width
	end

	def render(buf, max_content_width)
		@txt.lines.each_with_index do |line, i|
			buf.write(0, i, DecoratedText.new("", line))
		end
		@txt.lines.size + 1
	end
end

class Column < Entry
	def initialize(weight)
		@entries = []
		@weight = weight  # TODO
	end

	def <<(ent)
		@entries << ent
	end

	def width
		@entries.map { |e| e.width }.max
	end

	def render(buf, max_content_width)
		max_content_width = @entries.map{|s| s.width}.max

		ypos = 0

		@entries.each do |e|
			ypos += e.render(buf.child(0, ypos, buf.width, buf.height - ypos), max_content_width)
		end

		ypos
	end

	def wrap_last(&block)
		@entries[-1] = block.call(@entries[-1])
	end
end

class Slide
	attr_reader :slide_num

	def initialize(slide_num)
		@slide_num = slide_num
		@entries = []
		@current_column = nil
	end

	def render
		@pad_top = CONFIG['pad.top']
		@pad_left = CONFIG['pad.left']
		@pad_right = CONFIG['pad.right']
		@pad_column = CONFIG['pad.column']

		buffer = RenderBuffer.new(COLS, ROWS)
		max_content_width = [
			@entries.map{|s| s.width}.max,
			COLS - @pad_left - @pad_right
		].min

		ypos = @pad_top

		col_set = []
		@entries.each do |e|
			if e.is_a?(Column)
				col_set << e
				next
			elsif !col_set.empty?
				ypos += display_columns(buffer.child(@pad_left, ypos, COLS - @pad_left - @pad_right, ROWS - ypos), col_set)
				col_set = []
			end

			if e.own_padding?
				ypos += e.render(buffer.child(0, ypos, COLS, ROWS - ypos), max_content_width)
			else
				ypos += e.render(buffer.child(@pad_left, ypos, COLS - @pad_left - @pad_right, ROWS - ypos), max_content_width)
			end
		end

		if !col_set.empty?
			ypos += display_columns(buffer, col_set)
		end

		buffer
	end

	def display_columns(buffer, col_set)
		# TODO: use weight or automatic allocation here
		col_width = (buffer.width - @pad_column * (col_set.size - 1)) / col_set.size
		col_set.each_with_index.map do |col, i|
			max_content_width = [
				col.width,
				col_width
			].min

			col.render(buffer.child(i * (col_width + @pad_column), 0, col_width, buffer.height), max_content_width)
		end.max
	end

	def <<(ent)
		if @current_column
			@current_column << ent
		else
			@entries << ent
		end
	end

	def add_column(weight)
		@current_column = Column.new(weight)
		@entries << @current_column
	end

	def end_columns
		raise "No open columns" if @current_column.nil?
		@current_column = nil
	end

	def empty?
		!@title.nil? || !@bullets.empty?
	end

	def wrap_last(&block)
		if @current_column.nil?
			@entries[-1] = block.call(@entries[-1])
		else
			@current_column.wrap_last {|e| block.call(e)}
		end
	end
end

class TerminalPoint
	def initialize
		@slides = []
	end

	# [DSL] begin a new slide
	def slide
		last_slide = @slides.empty? ? 0 : @slides.last.slide_num
		@slides << Slide.new(last_slide + 1)
	end

	# [DSL] pause for input before displaying the next element
	def build
		@slides << Marshal.load(Marshal.dump(@slides.last))
	end

	# [DSL] add a title element to the slide
	#   s: markdown or ANSI text to display
	def title(s)
		@slides.last << Title.new(s)
	end

	# [DSL] add a bullet element to the slide
	#   s: markdown or ANSI text to display
	def bullet(*args)
		@slides.last << Bullet.new(*args)
	end

	# [DSL] add a table element to the slide
	#   t: an array of table rows.  Each row is an array of markdown or ANSI text for a cell.
	#      A special row value :header indicates that the next row should be displayed as a header.
	def table(t)
		@slides.last << Table.new(t)
	end

	# [DSL] add a fixed-format element to the slide
	#   txt: text to be displayed verbatim, including newlines.  No markdown processing occurs.
	def pre(txt)
		@slides.last << Pre.new(txt)
	end

	# [DSL] add a column to the slide.  All following entries go in this column.
	#   weight: relative width of the column.  If omitted, defaults to an
	#   equal share.
	def column(weight=nil)
		@slides.last.add_column(weight)
	end

	def end_columns
		@slides.last.end_columns
	end

	# [DSL] center a `pre` element on the slide
	# Usage:
	#   pre center 'something'
	def center(entry)
		@slides.last.wrap_last { |x| Center.new(x) }
	end

	# [DSL] change the value of a configuration key
	#   key: the key, which must exist in the default CONFIG hash
	#   value: the value, which must be the same class as the default value
	def config(key, value=nil)
		if key == :default
			DEFAULTS.each { |k, v| CONFIG[k] = v }
			return
		end

		raise "Unknown config key #{key}" unless CONFIG.has_key?(key)
		if value == :default
			CONFIG[key] = DEFAULTS[key].dup
			return
		end

		raise "Config key #{key} must be a #{CONFIG[key].class}" unless value.is_a?(CONFIG[key].class)
		CONFIG[key] = value
	end

	# [DSL] set a custom color, which can be used in config and fmt commands
	#   key: the name of the new color
	#   value: either a string-separated list of COLOR keys, like 'bold red', or a hex value like '#ffccaa'
	def color(key, value)
		COLOR[key] = TerminalPoint.color_to_codes(value)
	end

	# [DSL] decorate the text with a list of selectors
	#   col: one or more selectors, as a space-separated string.  Each selector is either a key in the
	#        COLOR array or a hex code.  E.g., "bg:green #ff0000 italic"
	#   s: the string to decorate
	# Example:
	#   fmt('bg:green #ff0000 italic', 'Ugly!')
	def fmt(col, s)
		TerminalPoint.fmt(col, s)
	end

	# [DSL] decorate the text with rainbow colors
	#   s: the string to decorate
	def rainbow(s)
		colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']
		s.chars.each_with_index.map{|c, i| fmt(colors[i % colors.size], c)}.join
	end

	def TerminalPoint.display_width(s)
		s.gsub(/\x1b\[[0-9;]+m/, '').size
	end

	# Map a logical format to a string of ANSI codes
	#   col: any key from the COLOR array, or a hex code like "#ffccaa"
	#   returns: the numeric part of an ANSI sequence, like "31;1" for bold red
	def TerminalPoint.color_to_codes(col)
		col.split(/\s+/).map {|one_color|
			if one_color =~ /^bg:/
				one_color = one_color[3..]
				bg = true
			end

			code = if COLOR.has_key?(one_color)
				COLOR[one_color]
			elsif one_color =~ /^#[0-9a-fA-F]{6}$/
				red = one_color[1..2].hex
				green = one_color[3..4].hex
				blue = one_color[5..6].hex
				"38;2;#{red};#{green};#{blue}"
			else
				raise "Unknown color: #{one_color}"
			end

			if bg
				codes = code.split(/;/)
				codes[0] = (codes[0].to_i + 10).to_s
				code = codes.join(';')
			end

			code
		}.join(';')
	end

	# Apply a logical format to a string
	#   col: a space-separated list of color keys, which are either keys from the COLOR array, or a hex code like "#ffccaa"
	#   s: the string to decorate
	#   returns: s, with the ANSI codes selected by col applied
	def TerminalPoint.fmt(col, s)
		return s if col == "plain"
		code = color_to_codes(col)
		ansi(code, s)
	end

	# Apply a sequence of ANSI codes to a string.
	#   codes: just the numeric part of the code, like "31;1" for bold red
	#   s: the string to decorate, which might already have some ANSI in it
	#   returns: s, with the codes wrapped around it
	def TerminalPoint.ansi(codes, s)
		# If there are already ANSI codes in `s`, like from the user using `#{fmt('bold', '...')}` in their config file
		# rewrite the end of those sequences to apply the overall formatting for the string.
		sfix = s.gsub("\x1b[0m", "\x1b[0;#{codes}m")
		"\x1b[0;#{codes}m#{sfix}\x1b[0m"
	end

	def play(start_slide)
		if !STDOUT.tty?
			@slides[start_slide..].each do |slide|
				slide.render.display
			end
			return
		end

		current_slide = start_slide
		show(current_slide)
		STDIN.raw do |stdin|
			s = ""
			loop do
				c = stdin.getc
				break if c.nil?
				s += c
				case s
					when "\r", " ", INPUT_PGDOWN, INPUT_RIGHT, INPUT_DOWN
						current_slide = [current_slide + 1, @slides.size - 1].min
						show(current_slide)
					when "b", INPUT_PGUP, INPUT_LEFT, INPUT_UP
						current_slide = [current_slide - 1, 0].max
						show(current_slide)
					when INPUT_CTRL_L
						show(current_slide)
					when "g", INPUT_HOME
						current_slide = 0
						show(current_slide)
					when "G", INPUT_END
						current_slide = @slides.size - 1
						show(current_slide)
					when "q", "\e\e"
						break
					when "\e", "\e[", "\e[5", "\e[6"
						next
				end
				s = ""
			end
		end
		puts ANSI_SHOW_CURSOR;
	end

	def show(current_slide)
		STDIN.cooked {
			buf = @slides[current_slide].render
			slide_num = @slides[current_slide].slide_num
			slide_count = @slides.last.slide_num

			footer = "#{slide_num} / #{slide_count}"
			buf.write(buf.width - footer.size - 1, buf.height - 1,
				DecoratedText.new(TerminalPoint.color_to_codes(CONFIG['footer.color']), footer))
			buf.display
		}
	end
end

def usage
	puts "Usage:"
	puts "  #{$0} [--slide N]"
	puts "  #{$0} [--config] [--colors]"
end

start_slide = 1
filename = "-"

while !ARGV.empty?
	arg = ARGV.shift
	case arg
		when "--config"
			CONFIG.each do |key, value|
				puts "CONFIG[#{key.inspect}] = #{value.inspect}"
			end
			quit_now = true
		when "--colors"
			COLOR.each do |key, value|
				puts "COLOR[#{key.inspect}] = #{value.inspect}"
			end
			quit_now = true
		when "--slide"
			start_slide = ARGV.shift.to_i
		when "--help"
			usage
			quit_now = true
		else
			if arg !~ /^--/
				filename = arg
			else
				puts "Unknown argument: #{arg}"
				usage
				quit_now = true
			end
	end
end
exit 0 if quit_now

DEFAULTS = CONFIG.dup
		
tp = TerminalPoint.new
tp.instance_eval(File.read(filename))
tp.play(start_slide-1)
